digraph G {
    main -> G_Graph;
    main -> readInstance;
    main -> solveModels;
    main -> cout;

    readInstance -> readGraphChen -> G_set_number_vert;
        readGraphChen -> G_addEdge [color=red, label="n^2 times"];
    readInstance -> readMediumInstances -> G_set_number_vert;
        readMediumInstances -> G_addEdge2 [color=red];
    readInstance -> readLeighton -> G_set_number_vert;
        readLeighton -> G_addEdge2 [color=red];
    readInstance -> readSteind -> G_set_number_vert;
        readSteind -> G_addEdge2 [color=red];
    readInstance -> readTSPLIB95 -> G_set_number_vert;
        readTSPLIB95 -> G_addEdge2 [color=red];
            G_addEdge2 -> G_existsEdge

    solveModels -> G_get_num_vert;
    solveModels -> G_detectBridges;
    solveModels -> findOH_NH;
        findOH_NH -> G_get_num_vert;
        findOH_NH -> G_degree [color = blue, label = "n times"];
        findOH_NH -> G_existsEdge [color=red, label="n^2 times"];
    solveModels -> Solve_ModelCut;
    solveModels -> H_get_num_vert;
    solveModels -> G_G_BFS [color = blue, label = "n times"];
        G_G_BFS -> H_Graph;        
        G_G_BFS -> H_get_num_vert;
        G_G_BFS -> H_existsEdge [color = orange, label = "many times"];
        G_G_BFS -> H_addEdge [color = orange];
    solveModels -> Solve_ModelCut [color = blue, label = "n times"];
        Solve_ModelCut -> G_get_num_vert;
        Solve_ModelCut -> G_detectCutH;
            G_detectCutH -> G2_degree [color = blue, label = "n times"];
            G_detectCutH -> G2_clear_vert [color = blue];
                G2_clear_vert -> removeEdge [color = orange, label = "many times"];
            G_detectCutH -> G2_BFS_Conexity [color = blue];
                G2_BFS_Conexity -> reset_visited;
            G_detectCutH -> G2_add_all_vert [color = blue];
            G2_add_all_vert -> addEdge [color = orange, label = "many times"];
        Solve_ModelCut -> Solve_Graph;

    Solve_Graph -> Solve_Model;
        Solve_Model -> H_get_num_vert;
        Solve_Model -> Heuristic;
        Solve_Model -> heuristic_ILS;
        Solve_Model -> H_findCocycle;
            H_findCocycle -> existsEdge [color = orange, label = "n^2/2 times"];
        Solve_Model -> root_function;
            root_function -> G_get_num_vert;
            root_function -> G_degree [color = blue, label = "n times"];
        Solve_Model -> Solve_ModelTime;
            Solve_ModelTime -> H_get_num_vert;
            Solve_ModelTime -> IloCplex_functions;
            Solve_ModelTime -> H_degree [color = blue, label = "n times"];

    heuristic_ILS -> G_get_num_vert;
    heuristic_ILS -> make_tree;
        make_tree -> G_get_num_vert;
        make_tree -> T_set_number_vert;
        make_tree -> Select_1 [color = orange, label = "many times"];
            Select_1 -> G_get_num_vert;
            Select_1 -> T_addEdge;
        make_tree -> Select_2 [color = orange];
            Select_1 -> G_get_num_vert;
            Select_1 -> absorve;
                absorve -> T_get_num_vert;
            Select_1 -> T_addEdge;
        make_tree -> Select_3 [color = orange];
            Select_3 -> G_get_num_vert;
            Select_3 -> absorve;
            Select_3 -> T_addEdge;
        make_tree -> Select_4 [color = orange];
            Select_4 -> G_get_num_vert;
            Select_4 -> absorve;
            Select_4 -> T_addEdge;
        make_tree -> Select_5 [color = orange];
            Select_5 -> G_get_num_vert;
            Select_5 -> absorve;
            Select_5 -> T_addEdge;
        make_tree -> Select_6 [color = orange];
            Select_6 -> G_get_num_vert;
            Select_6 -> absorve;
            Select_6 -> T_addEdge;
        make_tree -> T_get_numb_edges [color = orange, label = "many times"]; 
        make_tree -> T_degree [color = blue, label = "n times"];
    heuristic_ILS -> Tbest_Graph;
    heuristic_ILS -> Perturbation [color = orange, label = "many times"];
        Perturbation -> G_get_num_vert;
        Perturbation -> T_degree [color = blue, label = "n times"];
        Perturbation -> G_degree [color = blue];
        Perturbation -> T_getList_Adj [color = orange, label = "many times"];
        Perturbation -> RemoveEdge [color = orange];
            RemoveEdge -> T_get_num_vert;
        Perturbation -> FindEdgePert [color = orange];
            FindEdgePert -> G_get_num_vert;
            FindEdgePert -> G_degree [color = orange, label = "2n * many times"]
        Perturbation -> T_removeEdge [color = orange];
        Perturbation -> T_addEdge [color = orange];
    heuristic_ILS -> LocalSearch [color = orange, label = "many times"];
    heuristic_ILS -> T_degree [color = blue, label = "n times"];

    LocalSearch -> G_get_num_vert;
    LocalSearch -> FirstBestN [color = orange, label = "many times"];
        FirstBestN -> G_get_num_vert;
        FirstBestN -> T_degree [color = blue, label = "2n times"];
        FirstBestN -> T1_getList_Adj [color = orange, label = "many times"];
        FirstBestN -> T1_degree [color = green, label = "many times^2"];
        FirstBestN -> RemoveEdge [color = green];
        FirstBestN -> FindEdge [color = green];
            FindEdge -> G_get_num_vert ;
            FindEdge -> G_degree [color = green, label = "many times"];
            FindEdge -> T1_degree [color = green];
        FirstBestN -> T1_removeEdge [color = green];
        FirstBestN -> T1_addEdge [color = green];
    LocalSearch -> T_degree [color = blue, label = "n times"];

    Solve_Graph -> Solve_Graph;
    Solve_Graph -> Solve_Graph [color = blue, label = "n times"]; 

    Solve_Graph -> G2_Graph;
    Solve_Graph -> G2_get_num_vert;
    Solve_Graph -> G2_clear_vert;
        G2_clear_vert -> removeEdge [color = orange, label = "many times"];
    Solve_Graph -> G2_reset_visited [color = orange, label = "2 times"];
    Solve_Graph -> H_Graph [color = blue, label = "n times"];
    Solve_Graph -> H_existsEdge[color = orange, label = "n * many times"];
    Solve_Graph -> H_addEdge[color = orange, label = "n * many times"];
    Solve_Graph -> G_degree[color = blue, label = "n times"];
    Solve_Graph -> H_degree[color = blue, label = "n times"];
    Solve_Graph -> H_get_num_vert [color = orange, label = "2n times"];
}
